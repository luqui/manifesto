-- Assumptions:
-- Every state is representable (modulo the interaction monad m) in the 
-- pair of AST and focus context.

-- Under this assumption, editors should be representable by
--   AST * focus -> m (AST * focus)

-- But what is AST * focus?
-- We could use a traditional zipper structure, but I kind of hate all the
-- duplication that entails.

-- One guess: s * Lens a s
-- Unclear how to model motions though.  For example, to navigate to the right
-- in a list, we would have to determine which list element the lens was
-- pointing at.  This could be done in a hacky way if we had (Eq a) and access
-- to a "fresh" a.  But it's possible that the lens could refer to an `a`
-- several levels deep, as well.  What if we tear apart the data structure,
-- using its finiteness:
--
-- f a =~= f () * [a]
--
-- Then we could use indices alone to navigate around in f.  This does not,
-- however, handle change of f's constructors.  It also doesn't handle the
-- possibility that different holes in `f` might have different types.
--
-- Since different holes might have different types, it means
--   AST * focus -> m (AST * focus)
-- might be a type-changing operation.  So more like
--
--   ASTFocus a -> exists b. m (ASTFocus b)
--
-- where the type parameter is the type of the thing focused on.
--
-- Maybe we need to bite the bullet and have a type family for the zipper of a
-- particular type.
--
--   data Foo = Foo Bar Baz
--
--   data family FooCx a where
--      FooLeft :: Baz -> FooZ Bar
--      FooRight :: Bar -> Fooz Baz
--
-- and then a zipper
--
--   type Zipper cx = Î£ a. (cx a, a)
--
--   moveRight :: Zipper FooCx -> Zipper FooCx
--   moveRight (FooLeft baz, bar) = (FooRight bar, baz)
--   moveRight (FooRight bar, baz) = (FooRight bar, baz)
--
-- It's ok... I wish I could get back to the idea I had in notes.txt.
--
--  cursor xs = group xs $ adjacent
--    [ group (pre <+> "|" <+> post) ((pre ++) <$> edit post) | ... ]
--
-- which seems perfectly great for viewing and even navigation of a *static*
-- term.  What is missing is dynamism.
--
-- So what about patches?
